# Usage example:
#   ```SWARM_MANAGER_HOSTNAME=sprocket ENDPOINT_HOSTNAME=tada.cnx.org docker -H sprocket stack deploy -c docker-stack.testing.yml testing```
# Where the swarm manager is on the host named 'sprocket'.
# The endpoint is 'tada.cnx.org' in this example, in production for example, it would be 'cnx.org'.

version: '3'
services:
  ###
  # third-party or out-of-scope services
  ###

  # ... none anymore, but here as a place holder

  ###
  # core third-party components
  ###
  db:
    image: openstax/cnx-db:latest
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - DB_URL=postgresql://rhaptos@/repository
      - DB_SUPER_URL=postgresql://rhaptos_admin@/repository
    networks:
      - default

  memcached:
    image: memcached:latest
    networks:
      - default

  # FIXME: We should use a single rabbitmq instance, but this is easier to configure
  broker-publishing:
    image: rabbitmq:3
  #  environment:
  #    - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
  #    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - default
  broker-press:
    image: rabbitmq:3
  #  environment:
  #    - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
  #    - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - default

  ###
  # CNX components
  ###

  archive:
    image: openstax/cnx-archive:latest
    # command: <use default entry-point>
    networks:
      - default
    depends_on:
      - db
      - memcached
    environment:
      - ARCHIVE_SENTRY_DSN

  publishing:
    image: openstax/cnx-publishing:dev
    command: bash -c "pserve $${PYRAMID_INI}"
    networks:
      - default
    environment:
      - DB_URL
      - DB_SUPER_URL
      - AMQP_URL=${BASE_PUBLISHING_AMQP_URL}
      - USERS=smoo,pauperized1821(horrendously
      - MODERATORS=smoo
      - ADMINISTRATORS=smoo
      - MATHMLCLOUD_URL
      - MEMCACHE_HOST
      - EXERCISES_URL
      - PUBLISHING_SENTRY_DSN

  publishing-worker:
    image: openstax/cnx-publishing:dev
    command: bash -c "celery worker -A cnxpublishing -Q default,deferred --loglevel debug"
    networks:
      - default
    environment:
      - DB_URL
      - DB_SUPER_URL
      - AMQP_URL=${BASE_PUBLISHING_AMQP_URL}
      - USERS=smoo,pauperized1821(horrendously
      - MODERATORS=smoo
      - ADMINISTRATORS=smoo
      - MATHMLCLOUD_URL
      - MEMCACHE_HOST
      - EXERCISES_URL
      - PUBLISHING_SENTRY_DSN

  channel-processing:
    image: openstax/cnx-publishing:dev
    command: bash -c "cnx-publishing-channel-processing $${PYRAMID_INI}"
    networks:
      - default
    environment:
      - DB_URL
      - DB_SUPER_URL
      - AMQP_URL=${BASE_PUBLISHING_AMQP_URL}
      - USERS=smoo,pauperized1821(horrendously
      - MODERATORS=smoo
      - ADMINISTRATORS=smoo
      - MATHMLCLOUD_URL
      - MEMCACHE_HOST
      - EXERCISES_URL
      - PUBLISHING_SENTRY_DSN

  press:
    image: openstax/cnx-press:dev
    command: gunicorn -b 0.0.0.0:6543 --access-logfile - --error-logfile - -n press --timeout=180 wsgi:app
    networks:
      - default
    environment:
      # TODO: shared dir volume
      - SHARED_DIR=/app/var
      - DB_URL
      - DB_SUPER_URL
      - AMQP_URL=${BASE_PRESS_AMQP_URL}
      - PRESS_SENTRY_DSN

  press-worker:
    image: openstax/cnx-press:dev
    command: celery -A press worker --beat --loglevel debug
    networks:
      - default
    environment:
      # TODO: shared dir volume
      - SHARED_DIR=/app/var
      - DB_URL
      - DB_SUPER_URL
      - AMQP_URL=${BASE_PRESS_AMQP_URL}
      - PRESS_SENTRY_DSN

  ui:
    image: openstax/cnx-webview:dev
    networks:
      - default
      - traefik-net
    environment:
      - ENVIRONMENT=prod
      - ARCHIVE_HOST=archive-${ENDPOINT_HOSTNAME}
      - ARCHIVE_PORT=443

  robotstxt:
    image: openstax/robotstxt
    networks:
      - default
      - traefik-net
    deploy:
      labels:
        - "traefik.port=80"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${ENDPOINT_HOSTNAME},archive-${ENDPOINT_HOSTNAME},legacy-${ENDPOINT_HOSTNAME};Path:/robots.txt"
        - "traefik.frontend.redirect=https"

  http-cache:
    image: openstax/cnx-varnish:latest
    command: "-T 127.0.0.1:6082"
    networks:
      - default
      - traefik-net
    environment:
      - VARNISH_WEBVIEW_HOST=ui
      - VARNISH_WEBVIEW_PORT=80
      - VARNISH_ARCHIVE_HOST=archive
      - VARNISH_ARCHIVE_PORT=6543
      - VARNISH_PUBLISHING_HOST=publishing
      - VARNISH_PUBLISHING_PORT=6543
      - VARNISH_PRESS_HOST=press
      - VARNISH_PRESS_PORT=6543
      - VARNISH_ARCLISHING_DOMAIN=archive-${ENDPOINT_HOSTNAME}
      - VARNISH_FRONTEND_DOMAIN=${ENDPOINT_HOSTNAME}
      - VARNISH_ALLOWED_PURGE_SUBNET=${TRAEFIK_SUBNET}
    deploy:
      labels:
        - "traefik.port=80"
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:${ENDPOINT_HOSTNAME},archive-${ENDPOINT_HOSTNAME},legacy-${ENDPOINT_HOSTNAME}"
        - "traefik.frontend.redirect=https"

volumes:
  pgdata:

networks:
  traefik-net:
    driver: overlay
    # This inaccurately states that this network was created external to the stack.
    external: true
